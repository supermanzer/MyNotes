{"pageProps":{"note":{"id":"ax5eormma12p6xh5fqtcxkh","title":"Repository","desc":"","updated":1663614665514,"created":1663027278967,"custom":{},"fname":"projects.ndbc-reader.design.repository","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"134d52a6684dd4805cd0d7dd4b2ab0cc","links":[{"type":"wiki","from":{"fname":"projects.ndbc-reader.design.repository","id":"ax5eormma12p6xh5fqtcxkh","vaultName":"Dendron"},"value":"projects.ndbc-reader.design.domain","alias":"projects.ndbc-reader.design.domain","position":{"start":{"line":36,"column":245,"offset":1205},"end":{"line":36,"column":283,"offset":1243},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"projects.ndbc-reader.design.domain"}},{"type":"ref","from":{"fname":"projects.ndbc-reader.design.repository","id":"ax5eormma12p6xh5fqtcxkh","vaultName":"Dendron"},"value":"projects.ndbc-reader.design.repository.persistence","position":{"start":{"line":5,"column":1,"offset":69},"end":{"line":5,"column":56,"offset":124},"indent":[]},"xvault":false,"to":{"fname":"projects.ndbc-reader.design.repository.persistence"}}],"anchors":{"dependency-inversion-principle":{"type":"header","text":"Dependency Inversion Principle","value":"dependency-inversion-principle","line":44,"column":0,"depth":2},"implementation":{"type":"header","text":"Implementation","value":"implementation","line":53,"column":0,"depth":3},"end-goal":{"type":"header","text":"End Goal","value":"end-goal","line":68,"column":0,"depth":3}},"children":["mmaowqpd8nipggq46jf73o9"],"parent":"bvip3z5lby4gsw8f7wmru81","data":{}},"body":"<h1 id=\"repository\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#repository\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Repository</h1>\n<p><em>Applying the Repository pattern for abstracting data storage</em></p>\n<hr>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Persistence</span></div>\n<a href=\"/MyNotes/notes/mmaowqpd8nipggq46jf73o9\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">â†’</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>At the time of this writing the current persistence method is to write out the necessary data to a <code>.json</code> file.  </p>\n</div></div><p></p><p></p>\n<p>Let's start with a simple diagram of what we are trying to achieve here.</p>\n<div class=\"mermaid\">\n  flowchart TB\n    subgraph domain\n        A[NDBC API] --> B[DataPackage]\n        B --> C[DataBuoy]\n    end\n    subgraph Repository\n        D[Abstract Repository] \n        E[Concrete Repositories]\n        E -- implements -->D\n    end\n    D --> C \n    E --> F[File System]\n    \n</div>\n<p>This design pattern will abstract away the data layer of our software from the model/business logic.  We are attempting to split this software (originally conceived as a single class with a large number of functions) into a layered, or more accurately onion, architecture design.  Let's make another diagram for this approach so we know where we're going.</p>\n<div class=\"mermaid\">\n  flowchart TB\nA[High Level Functions]\nB[Domain Model]\nC[Data Storage/Respository]\nA --> B\nC --> B\n</div>\n<p>The book (architecture patterns in Python) is assuming the use of a database and using and SQLAlchemy ORM to handle interactions.  In our case we are just looking to write to a file but we can apply some of the same principles to help make our <a href=\"/MyNotes/notes/a4txnw183cgd9psxfu5jd0k\">Domain</a> unaware of how the data is loaded/saved.</p>\n<h2 id=\"dependency-inversion-principle\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#dependency-inversion-principle\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Dependency Inversion Principle</h2>\n<p> One of the major goals of the design patterns outlined in <em>Architecture Patterns in Python</em> is that our high-level business logic should have no direct dependencies.  Rather than our higher level software being dependant on lower level code, we seek to invert this relationship, with our lower-level, less abstract/more concrete, code being dependant on our high-level, more abstract business logic.</p>\n<p> The purpose for this is that it allows for modification to the concrete implementation of various functionalities without modifying the code in our business logic.  A good way to identify this in practice when reviewing the actual code written is which files depend or \"know about\" which others.  If we do it right in the context of this project the <code>NDBC.DataBuoy</code> class should know nothing about </p>\n<ol>\n<li>How we make HTTP requests to NDBC web servers</li>\n<li>How we save <code>DataBuoy</code> data to disk</li>\n<li>How we retrieve data from disk.</li>\n</ol>\n<h3 id=\"implementation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#implementation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Implementation</h3>\n<p> In the book, the authors are making use of SQLAlchemy ORM tools to create an ORM that depends on our domain models.  In the case of NDBC, the ORM should be responsible for mapping the <code>DataBuoy</code> contents to a specific JSON document structure.</p>\n<p>I'm not entirely sure how best to accomplish this but I'm going to start simple and refactor often.  I will start by creating a, potentially superfluous, ORM to abstract read/write operations.  </p>\n<p><strong>Observation:</strong> As I work through this process I see plenty of places where I have hard-coded values.  This makes me cringe but at the same time I know I can go <em>way</em> overboard in refactoring.  Like with SQL databases, any value that is used multiple times is often defined in a single place and referenced.  However, it is possible to go too far in this respect.  While I have seen some Python code abstract all constants to a separate file/package, I think this moves constant definitions too far from where they are used making it difficult to understand their importance.  I try to remember these two important lines from the <code>Zen of Python</code></p>\n<blockquote>\n<p>special cases aren't special enough to break the rules</p>\n</blockquote>\n<blockquote>\n<p>but practicality beats purity</p>\n</blockquote>\n<p>To that end I have created a <code>BuoyORM</code> class that currently handles reading from and writing to <code>.json</code> files.  I've abstracted out <em>most</em> of the hardcoded key values to facilitate using them in both read &#x26; write operations.  This is just the precursor to properly implementation of the Repository pattern but we need to start somewhere don't we?</p>\n<h3 id=\"end-goal\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#end-goal\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>End Goal</h3>\n<p>Here's a quick sketch that will help me keep track of what I want.</p>\n<div class=\"mermaid\">\n  flowchart TB\na[Application Layer]\n\nc[Repository]\nd[Persistence]\na ----> c\nc --Domain Model Objects --> a\nc --> d\nd --> c\n</div>\n<p>The purpose of the repository layer is to abstract the complexity of how we save/load domain models.  The application layer asks for an object and receives an instantiated domain model.  It does not need to know how that gets done.</p>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/MyNotes/notes/mmaowqpd8nipggq46jf73o9\">Persistence</a></li>\n</ol>","noteIndex":{"id":"0bwos7t08sg0btcv0xz15jj","title":"My Notes","desc":"The personal notes of Ryan Manzer - he puts the Manzer in Supermanzer","updated":1662760176992,"created":1653768544007,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"ef3049f4c9f2673d7492a7da3e888ac1","links":[{"type":"ref","from":{"fname":"root","id":"0bwos7t08sg0btcv0xz15jj","vaultName":"Dendron"},"value":"projects","position":{"start":{"line":8,"column":1,"offset":395},"end":{"line":8,"column":14,"offset":408},"indent":[]},"xvault":false,"to":{"fname":"projects"}}],"anchors":{"welcome-to-my-brain":{"type":"header","text":"Welcome to my brain","value":"welcome-to-my-brain","line":8,"column":0,"depth":2}},"children":["ZMf4aL2sSZBsUMJgMhn0R"],"parent":null,"data":{},"body":"\n## Welcome to my brain\n\nI use this wiki site and [Dendron](https://wiki.dendron.so/) to organize my thoughts about various software projects and ideas.  This tool is primarily to store my own thoughts and allow me to document my development process.  This helps me better organize these projects and plan future development.  \n\nIf others find this site interesting and possibly useful, bonus!\n\n![[projects]]"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template","insertNote":{"initialValue":"templates"}},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableMermaid":true},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteUrl":"https://supermanzer.github.io/MyNotes","assetsPrefix":"/MyNotes","siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"My Notes","description":"Personal Knowledge Space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enablePrettyLinks":true,"enableTaskNotes":true,"enableMermaid":true,"siteFaviconPath":"favicon.ico","siteIndex":"root","searchMode":"lookup"}}},"__N_SSG":true}